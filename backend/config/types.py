# backend/config/types.py
from __future__ import annotations
from typing import Literal, Protocol, Any, Callable, TypedDict

Visibility = Literal["public", "advanced", "hidden"]
Mutability = Literal["runtime", "startup", "locked"]

class ConfigMeta(TypedDict, total=False):
    visibility: Visibility
    mutable: Mutability
    summary: str


ChangeListener = Callable[[str, Any, Any, dict], None] # key, old, new, context

class ConfigProvider(Protocol):
    def get(self, key: str) -> Any | None: ...
    def set(self, key: str, value: Any) -> None: ...
    def to_dict(self) -> dict[str, Any]: ...
    def save(self) -> None: ... # No-op for read-only providers

class ConfigStore:
    def __init__(self, *, namespace: str, validator, providers: list[ConfigProvider]): ...
    def get(self, key: str) -> Any | None: ...
    def set(self, key: str, value: Any, *, target: Literal["runtime","save","global"]="runtime", actor: str="system") -> None: ...
    def meta(self, key: str) -> ConfigMeta: ...
    def subscribe(self, fn: ChangeListener) -> Callable[[], None]: ...
    def snapshot(self) -> dict[str, Any]: ...
    def diff(self, other: "ConfigStore") -> dict[str, tuple[Any, Any]]: ...    
