{
    __source: "settings_default.json5",
    protocol: {
        ackWaitMs: 250,
        graceWindowMs: 150,
        maxInFlightPerLane: 64,
        heartbeatMs: 5000,
        maxQueue: 1024,
        maxOfflineQueue: 2000,
    },
    reconnect: {
        initialDelayMs: 500,
        maxDelayMs: 15000,
        factor: 2.0,
        jitterRatio: 0.25
    },
    timeouts: {
        classes: {
            "request.fast": {
                serviceTtlMs: 800,
                clientPatienceExtraMs: 150,
            },
            "request.medium": {
                serviceTtlMs: 3000,
                clientPatienceExtraMs: 200,
            },
            "request.heavy": {
                serviceTtlMs: 30000,
                clientPatienceExtraMs: 250,
            },
        }
    },
    streams: {
        default: {
            targetHz: 10,
            maxQueueMs: 200,
            coalesce: "drop-oldest",
        }
    },
    http: {
        retry: 2,
        backoff: {
            baseMs: 250,
            maxMs: 1000,
            jitterPct: 30,
        },
        timeoutCapMs: 30000,
    },
    mods: {
        allowSymlinks: false,
    },
    httpProxy: {
        allowList: ["httpbin.org", "api.openai.com", "localhost", "127.0.0.1", "::1"],
        buckets: {
            default: {
                rpm: 600,
                burst: 200
            },
        },
        // Request header policy (mod -> backend -> upstream)
        requestHeaders: {
            mode: "block", // default: block; Block listed headers, allow the rest
            list: ["host", "connection", "content-length", "cookie"],
            // Optional per-host overrides:
            perHost: {
                "api.openai.com": {
                    mode: "allow",
                    list: ["authorization", "content-type"]
                }
            },
            // Optional per-capability overrides (if needed)
            perCap: {
                "http.client@1": { /* override here if needed */ },
            },
        },
        // Response header policy (upstream -> backend -> mod)
        responseHeaders: {
            mode: "allow", // default: allow; Only allow listed headers
            list: ["content-type", "content-length", "cache-control"],
            perHost: {
                "httpbin.org": {
                    mode: "allow",
                    list: ["content-type", "content-length"],
                },
            },
            perCap: {
                "http.client@1": { /* Override here if needed */ }
            }
        },
    },
    // Debugging support
    debug: {
        backend: {
            rpc: {
                maxPreviewChars: 1000000,
                incomingMessages: {
                    log: true,
                    ignoreTypes: ["ack", "heartbeat"],
                },
                outgoingMessages: {
                    log: true,
                    ignoreTypes: ["ack", "heartbeat"],
                    rules: [{
                        type: "stateUpdate",
                        shouldLog: true,
                        tests: [{
                            property: "payload.done",
                            op: "notExists",
                            value: true,
                            shouldLog: false
                        }],
                    }],
                },
            },
        },
        frontend: {
            rpc: {
                maxPreviewChars: 1000000,
                incomingMessages: {
                    log: true,
                    ignoreTypes: ["ack", "heartbeat"],
                    rules: [{
                        type: "stateUpdate",
                        shouldLog: true,
                        tests: [{
                            property: "payload.done",
                            op: "notExists",
                            value: true,
                            shouldLog: false
                        }],
                    }],
                },
                outgoingMessages: {
                    log: true,
                    ignoreTypes: ["ack", "heartbeat"],
                },
            },
        },
    },
}
